# Copyright 2008, 2009, 2010, 2011 Ingmar Vanhassel <ingmar@exherbo.org>
# Copyright 2013 Wulf C. Krueger <philantrop@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

myexparam -b htmldocs=true
myexparam -b manpages=true
myexparam git_remote_helpers[]

exparam -v GIT_REMOTE_HELPERS git_remote_helpers[@]

require perl-module python bash-completion elisp-optional [ source_directory=contrib/emacs ] systemd-service zsh-completion

export_exlib_phases src_unpack src_configure src_compile src_test src_install

SUMMARY="A distributed VCS focused on speed, effectivity and real-world usability on large projects"
DESCRIPTION="
Git is a fast, scalable, distributed revision control system with an unusually
rich command set that provides both high-level operations and full access to internals
"
HOMEPAGE="http://git-scm.com/"
DOWNLOADS="http://git-core.googlecode.com/files/${PNV}.tar.gz"
exparam -b htmldocs && DOWNLOADS+=" doc? ( http://git-core.googlecode.com/files/git-htmldocs-${PV}.tar.gz )"
exparam -b manpages && DOWNLOADS+=" http://git-core.googlecode.com/files/git-manpages-${PV}.tar.gz"

BUGS_TO="ingmar@exherbo.org philantrop@exherbo.org"

REMOTE_IDS="freecode:${PN}"

LICENCES="GPL-2"
SLOT="0"
MYOPTIONS="
    baselayout
    curl
    emacs [[ description = [ Install various Emacs libraries: git.el, git-blame.el and vc-git.el ] ]]
    ipv6
    python [[ description = [ Install helper scripts for git remote helpers, a compatibility layer with other SCMs ] ]]
    tk
    webdav [[ requires = curl description = [ Adds support for pushing using http:// and https:// transports ] ]]
    xinetd
"
exparam -b htmldocs && MYOPTIONS+=" doc"

# The remote helpers' original home is http://felipec.wordpress.com/2012/11/13/git-remote-hg-bzr-2
MYOPTIONS+="
    (
        git_remote_helpers: ${GIT_REMOTE_HELPERS[*]}
    ) [[ *requires = [ python ] ]]
"

DEPENDENCIES="
    build+run:
        dev-lang/perl:=[>=5.7.3]
        dev-libs/openssl
        sys-libs/zlib
        curl? ( net-misc/curl )
        tk? (
          dev-lang/tcl[>=8.4]
          dev-lang/tk[>=8.4]
        )
        webdav? ( dev-libs/expat )
    run:
        git_remote_helpers:bzr? (
            dev-lang/python:=
            dev-scm/bzr
        )
        git_remote_helpers:mercurial? (
            dev-lang/python:=
            dev-scm/mercurial
        )
        !dev-scm/git-remote-helpers [[
            description = [ The remote helpers are included since git-1.8.2 ]
            resolution = uninstall-blocked-after
        ]]
        xinetd? ( sys-apps/xinetd ) [[ description = [ Enables support for the xinetd super-server ] ]]
    suggestion:
        app-crypt/gnupg             [[ description = [ Needed for signing and verifying tags ] ]]
        dev-scm/cvsps               [[ description = [ Dependency for 'git cvsimport' ] ]]
        dev-perl/DBI                [[ description = [ Dependency for 'git cvsserver' ] ]]
        dev-lang/python:*           [[ description = [ Dependency for 'git p4' ] ]]
        dev-scm/subversion[perl]    [[ description = [ Dependency for 'git svn' ] group-name = [ git-svn ] ]]
        dev-perl/Error              [[ description = [ Dependency for 'git send-email' and other perl-based git tools ]
                                       group-name = [ git-send-email ]
                                       note = [ Error is barely alive and is not in ::arbor, thus, ineligible for stages ]
                                    ]]
        dev-perl/Error              [[ description = [ Dependency for 'git svn' and other perl-based git tools ]
                                       group-name = [ git-svn ]
                                       note = [ Error is barely alive and is not in ::arbor, thus, ineligible for stages ]
                                    ]]
        dev-perl/libwww-perl        [[ description = [ Dependency for 'git svn' ] group-name = [ git-svn ] ]]
        dev-perl/TermReadKey        [[ description = [ Dependency for 'git add --interactive, git svn' ] group-name = [ git-svn ] ]]
        dev-perl/Authen-SASL        [[ description = [ Dependency for 'git send-email' ] group-name = [ git-send-email ] ]]
        dev-perl/Crypt-RC4          [[ description = [ Dependency for 'git send-email' ] group-name = [ git-send-email ] ]]
        dev-perl/Net-SMTP-SSL       [[ description = [ Dependency for 'git send-email' ] group-name = [ git-send-email ] ]]
        virtual/mta                 [[ description = [ Dependency for 'git send-email' ] group-name = [ git-send-email ] ]]
        net-misc/openssh            [[ description = [ Enables support for ssh:// URIs ] ]]
        net-misc/rsync              [[ description = [ Enables support for rsync:// URIs ] ]]
        curl? ( net-misc/curl[ssl(+)]  [[ description = [ Enables support for https:// URIs ] ]] )
"

WORK=${WORKBASE}/${PNV/_/.}

git-googlecode_src_unpack() {
    unpack ${PNV}.tar.gz
    edo cd "${WORK}"
    exparam -b manpages && unpack ${PN}-manpages-${PV}.tar.gz

    if exparam -b htmldocs && option doc; then
        edo cd Documentation
        unpack ${PN}-htmldocs-${PV}.tar.gz
    fi
}

# No option: mozsha1/ppcsha1
# TODO Check whether we want NO_CROSS_DIRECTORY_HARDLINKS wrt pbins
git-googlecode_src_configure() {
    myoptions+=" NO_GETTEXT=YesPlease"
    option curl || myoptions+=" NO_CURL=YesPlease"
    option ipv6 || myoptions+=" NO_IPV6=YesPlease"
    option python || myoptions+=" NO_PYTHON=YesPlease"
    option tk || myoptions+=" NO_TCLTK=YesPlease"
    option webdav || myoptions+=" NO_EXPAT=YesPlease"
}

myemake() {
    local target=$(exhost --target)

    emake \
        DESTDIR="${IMAGE}" \
        prefix=/usr/${target} \
        gitexecdir=/usr/${target}/libexec/${PN} \
        gitwebdir=/usr/share/gitweb \
        template_dir=/usr/share/${PN}/templates \
        INSTALLSITELIB=${VENDOR_LIB} \
        CFLAGS="${CFLAGS} -Wall" \
        LDFLAGS="${LDFLAGS}" \
        CC="${CC}" \
        AR="${AR}" \
        ${myoptions} \
        "${@}"
}

git-googlecode_src_compile() {
    perlinfo
    myemake V=1 all
    elisp-optional_src_compile
}

git-googlecode_src_test() {
    esandbox allow_net "unix:${WORK%/}/t/trash directory.t0301-credential-cache/.git-credential-cache/socket";
    # default_src_test executes the wrong target, "make check", first
    myemake test
    esandbox disallow_net "unix:${WORK%/}/t/trash directory.t0301-credential-cache/.git-credential-cache/socket";
}

git-googlecode_src_install() {
    local host=$(exhost --target)

    myemake install

    if exparam -b manpages ; then
        doman man?/*
    else
        myemake ASCIIDOC8=YesPlease ASCIIDOC_NO_ROFF=YesPlease install-man
    fi

    dodoc README Documentation/{SubmittingPatches,CodingGuidelines}
    for d in / /howto/ /technical/ ; do
        docinto ${d}
        dodoc Documentation${d}*.txt
        if exparam -b htmldocs && option doc; then
            dodir /usr/share/doc/${PNVR}/html/
            insinto /usr/share/doc/${PNVR}/html/
            doins Documentation${d}*.html
        fi
    done
    docinto /

    dobashcompletion contrib/completion/git-completion.bash
    # zsh completion uses bash completion internally
    dozshcompletion contrib/completion/git-completion.zsh _git
    dozshcompletion contrib/completion/git-completion.bash
    elisp-optional_src_install

    option git_remote_helpers:bzr && dobin contrib/remote-helpers/git-remote-bzr
    option git_remote_helpers:mercurial && dobin contrib/remote-helpers/git-remote-hg

    if option python ; then
        python_bytecompile
    fi

    exeinto /usr/libexec/${PN}
    newexe contrib/fast-import/import-tars.perl git-import-tars

    docinto /gitweb/
    dodoc gitweb/{INSTALL,README}

    fixlocalpod
    edo find "${IMAGE}/usr/${host}/lib/perl5" -type f -name .packlist -delete
    edo find "${IMAGE}/usr/${host}/lib/perl5" -type d -empty -delete

    if option baselayout ; then
        newinitd "${FILES}"/git-daemon.initd git-daemon
        newconfd "${FILES}"/git-daemon.confd git-daemon
    fi

    if option xinetd ; then
        dodir /etc/xinetd.d
        insinto /etc/xinetd.d
        newins "${FILES}"/git-daemon.xinetd git-daemon
    fi

    if option systemd ; then
        hereconfd ${PN}-daemon.conf <<EOF
GIT_OPTS="/var/git"

GIT_USER="nobody"
GIT_GROUP="nobody"
EOF
    fi
    install_systemd_files

    keepdir /usr/share/${PN}/templates/branches
}

