# Copyright 2007, 2008 Bryan Ã˜stergaard
# Copyright 2008 Anders Ossowicki
# Copyright 2008, 2009, 2010 Ingmar Vanhassel
# Copyright 2008, 2009 Mike Kelly
# Copyright 2010 Ali Polatel
# Copyright 2013 Benedikt Morbach <moben@exherbo.org>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'perl-5.8.8-r4.ebuild' from Gentoo, which is:
#     Copyright 1999-2007 Gentoo Foundation

require alternatives flag-o-matic

export_exlib_phases src_unpack src_prepare src_configure src_test src_install

myexparam Module_Build_pv=

SUMMARY="Perl is a general-purpose programming language originally developed for text manipulation"
HOMEPAGE="http://www.perl.org"
DOWNLOADS="mirror://cpan/src/5.0/${PNV}.tar.bz2"

REMOTE_IDS="cpan:${PN} freecode:${PN}"

UPSTREAM_CHANGELOG="http://search.cpan.org/dist/${PN}/pod/${PN}$(ever delete_all $(ever range 1-3))delta.pod"
UPSTREAM_DOCUMENTATION=

LICENCES="|| ( Artistic GPL-1 GPL-2 GPL-3 )"
SLOT="$(ever range 1-2)"
MYOPTIONS="dbm ithreads
( berkdb gdbm ) [[ requires = dbm ]]
dbm? ( ( berkdb gdbm ) [[ number-selected = at-least-one ]] )
"

DEPENDENCIES="
    build+run:
        berkdb? ( sys-libs/db:= )
        gdbm? ( sys-libs/gdbm )
"

DEFAULT_SRC_INSTALL_EXTRA_DOCS=( Changes5 )

WORK="${WORKBASE}/build"

define() {
    echo "-D${1}=${2}"
}

option_define() {
    option "${1}" '-D' '-U'
}

perl-5_src_unpack() {
    default
    edo mkdir "${WORK}"
}

perl-5_src_prepare() {
    edo cd "${WORKBASE}/${PNV}"
    default

    # https://rt.perl.org/rt3//Public/Bug/Display.html?id=113022
    test-flag-CC -fno-lto && edo sed -e '/if(p())/{n; s/$ldflags/& -fno-lto/}' \
                                     -i Configure

    # find errno.h on cross
    edo sed -e "s#/usr/include/errno.h#/usr/$(exhost --target)/include/errno.h#g" \
            -i ext/Errno/Errno_pm.PL
}

perl-5_src_configure() {
    local host=$(exhost --target)
    local perl_base=/usr/${host}/lib/perl5

    # Binaries are installed to /usr/bin/, with ${SLOT} appended
    # Alternatives manages executables in /usr/bin/
    # Libraries go into ${perl_base}/${SLOT}/${CHOST%%-*}-linux/CORE/, which is appended to LDPATH
    # `man 1` are installed with a version

    # -Dfoo = define foo, -Ufoo = undefine foo.

    # -O3 breaks ext/XS/APItest/t/exception.t and maybe other stuff
    replace-flags -O3 -O2

    local myconf=(
        "${WORKBASE}/${PNV}/Configure"
        -des
        $(define cf_by Exherbo)
        "$(define cc     "${CC}"    )"
        "$(define ar     "${AR}"    )"
        "$(define nm     "${NM}"    )"
        "$(define ranlib "${RANLIB}")"
        $(define prefix       /usr/${host})
        $(define vendorprefix /usr/${host})
        $(define siteprefix   /usr/${host})
        "$(define optimize "${CFLAGS}"  )"
        "$(define ldflags  "${LDFLAGS}" )"
        # This probably needs some further work... but should be okay for
        # now. At least parrot breaks if we do not have -${osname} in ${archname}
        "$(define archname "${CHOST}")"
        $(define privlib        "${perl_base}/core_perl/${SLOT}-pure"               )
        $(define archlib        "${perl_base}/core_perl/${SLOT}-arch"               )
        $(define bin            "${perl_base}/core_perl/${SLOT}-bin"                )
        $(define scriptdir      "${perl_base}/core_perl/${SLOT}-bin"                )
        $(define man1dir        "${perl_base}/core_perl/${SLOT}-man/man1"           )
        $(define sitelib        "${perl_base}/site_perl/${SLOT}-pure"               )
        $(define sitearch       "${perl_base}/site_perl/${SLOT}-arch"               )
        $(define sitebin        "${perl_base}/site_perl/${SLOT}-bin"                )
        $(define sitescript     "${perl_base}/site_perl/${SLOT}-bin"                )
        $(define siteman1dir    "${perl_base}/site_perl/${SLOT}-man/man1"           )
        $(define vendorlib      "${perl_base}/vendor_perl/${SLOT}-pure"             )
        $(define vendorarch     "${perl_base}/vendor_perl/${SLOT}-arch"             )
        $(define vendorbin      "${perl_base}/vendor_perl/${SLOT}-bin"              )
        $(define vendorscript   "${perl_base}/vendor_perl/${SLOT}-bin"              )
        $(define vendorman1dir  "${perl_base}/vendor_perl/${SLOT}-man/man1"         )
        $(define perlpath       "${perl_base}/core_perl/${SLOT}-bin/${PN}${SLOT}"   )
        $(define startperl      "#!${perl_base}/core_perl/${SLOT}-bin/${PN}${SLOT}" )
        $(define libperl libperl.so.1.${SLOT})
        -Duseshrplib
        -Dmksymlinks
        -Duselargefiles
        -Uinstallusrbinperl
        -Ui_ndbm
        $(option_define ithreads)usethreads
        $(option_define gdbm)i_gdbm
        $(option_define berkdb)i_db
    )

    edo sh "${myconf[@]}" "${PERL5_CONFIGURE_PARAMS[@]}"
}

perl-5_src_test() {
    # This is necessary for the ExtUtils::Embed tests
    edo ln -s libperl.so.1{.${SLOT},}
    edo ln -s libperl.so{.1,}

    # This is necessary for t/cachepropagate-unix.t
    esandbox allow_net "unix:${TEMP}/**"
    # This is necessary for ext/IO/t/io_unix.t
    esandbox allow_net "unix:${WORK}/t/sock-*"
    # This is necessary for Net/Ping/t/510_ping_udp.t
    esandbox allow_net --connect "inet:127.0.0.1@7"
    # This is necessary for dist/IO/t/io_unix.t
    esandbox allow_net "unix:${WORK}/dist/IO/sock-*"

    [[ -v http_proxy ]] && unset http_proxy

    TEST_JOBS="${EXJOBS:-1}" emake test_harness

    esandbox disallow_net "unix:${TEMP}/**"
    esandbox disallow_net "unix:${WORK}/t/sock-*"
    esandbox disallow_net --connect "inet:127.0.0.1@7"
    esandbox disallow_net "unix:${WORK}/dist/IO/sock-*"
}

perl-5_src_install() {
    local host=$(exhost --target)
    local perl_base=/usr/${host}/lib/perl5

    default

    edo cd "${IMAGE}"

    # Library symlinks
    local perllibdir=${perl_base}/core_perl/${SLOT}-arch/CORE
    dosym libperl.so.1.${SLOT} ${perllibdir}/libperl.so.1
    dosym libperl.so.1         ${perllibdir}/libperl.so

    local perlbindir=${perl_base}/core_perl/${SLOT}-bin
    local perlmandir=${perl_base}/core_perl/${SLOT}-man/man1

    # Make the actual executable perl${SLOT}, create perl and perl$(ever range 1-3) further down with alternatives
    # Needed because some packages fully resolve the path before hardcoding it
    edo mv ${perlbindir#/}/${PN}{,${SLOT}}
    edo rm ${perlbindir#/}/${PN}$(ever range 1-3)

    # Create & keep site and vendor dirs
    keepdir ${perl_base}/{site,vendor}_perl/${SLOT}-{arch,bin,man/man1,pure}

    # We don't need packlists or perllocal.pod
    edo find usr/${host}/lib -type f -name .packlist -or -name perllocal.pod -delete

    # Discard man3 manpages (use perldoc)
    edo rm -r ${perl_base#/}/core_perl/${SLOT}-man/man3

    # Add alternative for perl tools and manpages
    # perl${SLOT} doesn't have a dash, handle that here
    local perl_alternatives=(
        ${perl_base}/core_perl/bin   ${SLOT}-bin
        ${perl_base}/site_perl/bin   ${SLOT}-bin
        ${perl_base}/vendor_perl/bin ${SLOT}-bin
        ${perl_base}/core_perl/man   ${SLOT}-man
        ${perl_base}/site_perl/man   ${SLOT}-man
        ${perl_base}/vendor_perl/man ${SLOT}-man
        /usr/${host}/bin/perl        ${perlbindir}/perl${SLOT}
    )

    alternatives_for ${PN} ${SLOT} ${SLOT} "${perl_alternatives[@]}"

    # add versioned symlinks to allow acces to non-selected versions
    local bin manpage
    for bin in ${perlbindir#/}/* ; do
        # handled in alternatives
        [[ ${bin} == ${perlbindir#/}/perl${SLOT} ]] && continue
        dosym ${bin##*/} ${bin}-${SLOT}
    done
    dosym perl${SLOT} ${perlbindir}/perl$(ever range 1-3)
    for manpage in ${perlmandir}/*.1; do
        dosym ${manpage##*/} ${manpage/%.1/-${SLOT}.1}
    done

    # env.d file for the current eclectic-selected perl version, unversioned directory
    # comes first in PATH (yes, this is the same for all versions, eclectic does deduplication for us)
    hereenvd 47perl-${SLOT} <<EOF
PATH="${perl_base}/site_perl/bin:${perl_base}/vendor_perl/bin:${perl_base}/core_perl/bin"
MANPATH="${perl_base}/site_perl/man:${perl_base}/vendor_perl/man:${perl_base}/core_perl/man"
EOF

    # env.d file for this perl's versioned directories, come after the above in PATH
    # The $((99-$(ever range 2))) trickery is to ensure that most recent comes first
    hereenvd 48.$((99-$(ever range 2)))perl-${SLOT} <<EOF
PATH="${perl_base}/site_perl/${SLOT}-bin:${perl_base}/vendor_perl/${SLOT}-bin:${perl_base}/core_perl/${SLOT}-bin"
MANPATH="${perl_base}/site_perl/${SLOT}-man:${perl_base}/vendor_perl/${SLOT}-man:${perl_base}/core_perl/${SLOT}-man"
EOF
}

