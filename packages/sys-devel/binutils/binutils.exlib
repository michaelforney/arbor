# Copyright 2007 Bryan Ã˜stergaard
# Copyright 2012 Saleem Abdulrasool <compnerd@compnerd.org>
# Distributed under the terms of the GNU General Public License v2

require gnu [ suffix=bz2 ] alternatives

export_exlib_phases src_prepare src_configure src_compile src_test_expensive src_install

SUMMARY="Collection of binary tools including ld and as"

REMOTE_IDS="freecode:${PN}"

LICENCES="GPL-3 LGPL-3"
SLOT="0"
CROSS_COMPILE_TARGETS="
    arm-exherbo-linux-gnueabi
    i686-pc-linux-gnu
    x86_64-pc-linux-gnu
    x86_64-pc-linux-musl
"
MYOPTIONS="
    targets: ${CROSS_COMPILE_TARGETS}
"

DEPENDENCIES="
    test-expensive:
        dev-tcl/expect
        sys-apps/bc
"

RESTRICT="test"

DEFAULT_SRC_PREPARE_PATCHES=( "${FILES}/76_all_use-new-ld-dtags.patch" )

ECONF_SOURCE="${WORKBASE}"/${PNV}

binutils_src_prepare() {
    # fixup broken locale install paths
    edo sed -e '/^localedir = /clocaledir = /usr/share/locale'          \
            -e '/^gnulocaledir = /cgnulocaledir = /usr/share/locale'    \
            -i "${WORK}/bfd/po/Make-in"                                 \
            -i "${WORK}/binutils/po/Make-in"                            \
            -i "${WORK}/gas/po/Make-in"                                 \
            -i "${WORK}/gold/po/Make-in"                                \
            -i "${WORK}/gprof/po/Make-in"                               \
            -i "${WORK}/ld/po/Make-in"                                  \
            -i "${WORK}/opcodes/po/Make-in"

    default
}

binutils_src_configure() {
    local host=$(exhost --target) target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        local libpath=/${target}/lib:/usr/${target}/lib

        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo mkdir -p "${WORKBASE}/build/${target}"
        edo cd "${WORKBASE}/build/${target}"
        econf                                               \
                --target=${target}                          \
                --disable-werror                            \
                --enable-gold                               \
                --enable-ld                                 \
                --enable-lto                                \
                --enable-plugins                            \
                --enable-shared                             \
                --enable-threads                            \
                --with-lib-path=${libpath}                  \
                $(if test x"${target}" = x"${host}" ; then
                    echo --program-prefix=${host}-
                  fi)                                       \
        || die
    done
}

binutils_src_compile() {
    local target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"
        edo cd "${WORKBASE}/build/${target}"
        default
    done
}

binutils_src_test_expensive() {
    local target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        if option !targets:${target} ; then
            option "    Cross-Compile Target; ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"
        edo cd "${WORKBASE}/build/${target}"
        emake "${DEFAULT_SRC_TEST_PARAMS[@]}" check
    done
}

binutils_src_install() {
    local host=$(exhost --target) target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        local m symbols
        # eclectic managed files
        local em=( /usr/${host}/bin/${target}-ld /usr/${host}/${target}/bin/ld )

        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo cd "${WORKBASE}/build/${target}"

        # default installation
        default

        # don't install everything twice
        for f in "${IMAGE}"/usr/${host}/${target}/bin/* ; do
            local t=${f#${IMAGE}/usr/${host}}
            local name=${f##*/}

            dosym ..${t} /usr/${host}/bin/${target}-${name}
        done

        # alternatives setup
        for m in "${em[@]}" ; do
            edo rm -f "${IMAGE}${m}"
        done

        for provider in bfd gold ; do
            local priority=
            local alternatives=()

            case "${provider}" in
            bfd)  priority=100 ;;
            gold) priority=10  ;;
            esac

            alternatives=( ld ${provider} ${priority} )
            for m in "${em[@]}" ; do
                alternatives+=( "${m}" "/usr/${host}/${target}/bin/ld.${provider}" )
            done
            alternatives_for "${alternatives[@]}"
        done
    done
}

